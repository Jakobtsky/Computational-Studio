<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=edge"/>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>10 Blog – 1</title>
<style id="applicationStylesheet" type="text/css">
	.mediaViewInfo {
		--web-view-name: 10 Blog – 1;
		--web-view-id: ID10_Blog___1;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}
	:root {
		--web-view-ids: ID10_Blog___1;
	}
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		border: none;
	}
	#ID10_Blog___1 {
		position: absolute;
		width: 1920px;
		height: 11880px;
		background-color: rgba(255,255,255,1);
		overflow: hidden;
		--web-view-name: 10 Blog – 1;
		--web-view-id: ID10_Blog___1;
		--web-scale-on-resize: true;
		--web-enable-deep-linking: true;
	}
	#Post_Thumbnails {
		position: absolute;
		width: 1920px;
		height: 2158px;
		left: 0px;
		top: 3242px;
		overflow: visible;
	}
	.Path_239 {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.161));
		overflow: visible;
		position: absolute;
		width: 1938px;
		height: 2176px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Post_Thumbnails_i {
		position: absolute;
		width: 1920px;
		height: 2160px;
		left: 0px;
		top: 1082px;
		overflow: visible;
	}
	.Path_239_j {
		filter: drop-shadow(0px 4px 6px rgba(0, 0, 0, 0.161));
		overflow: visible;
		position: absolute;
		width: 1938px;
		height: 2178px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Post_Thumbnails_k {
		position: absolute;
		width: 1920px;
		height: 1080px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	.Rectangle_78 {
		position: absolute;
		overflow: visible;
		width: 1920px;
		height: 1080px;
		left: 0px;
		top: 0px;
	}
	#Post_Preview {
		position: absolute;
		width: 1180px;
		height: 610px;
		left: 370px;
		top: 1332px;
		overflow: visible;
	}
	#text {
		position: absolute;
		width: 1180px;
		height: 610px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Lorem_ipsum_dolor_sit_amet__co {
		position: absolute;
		left: 820px;
		top: 130px;
		overflow: visible;
		width: 361px;
		height: 160px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#Culpa_qui_officia_deserunt_mol {
		position: absolute;
		left: 0px;
		top: 130px;
		overflow: visible;
		width: 361px;
		height: 480px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#Culpa_qui_officia_deserunt_mol_q {
		position: absolute;
		left: 410px;
		top: 130px;
		overflow: visible;
		width: 361px;
		height: 480px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#Paper_Prototype {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 361px;
		height: 80px;
		line-height: 40px;
		margin-top: -5px;
		text-align: left;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 30px;
		color: rgba(136,136,136,1);
	}
	#_Excepteur_sint_occaecat_cupid {
		position: absolute;
		left: 820px;
		top: 372px;
		overflow: visible;
		width: 361px;
		height: 150px;
		line-height: 30px;
		margin-top: -5px;
		text-align: left;
		font-family: Georgia;
		font-style: italic;
		font-weight: normal;
		font-size: 20px;
		color: rgba(136,136,136,1);
	}
	.Rectangle_8 {
		position: absolute;
		overflow: visible;
		width: 360px;
		height: 2px;
		left: 820px;
		top: 330px;
	}
	#Post_Preview_u {
		position: absolute;
		width: 1180px;
		height: 610px;
		left: 370px;
		top: 3571px;
		overflow: visible;
	}
	#text_v {
		position: absolute;
		width: 1180px;
		height: 610px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Lorem_ipsum_dolor_sit_amet__co_w {
		position: absolute;
		left: 820px;
		top: 130px;
		overflow: visible;
		width: 361px;
		height: 160px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#Culpa_qui_officia_deserunt_mol_x {
		position: absolute;
		left: 0px;
		top: 130px;
		overflow: visible;
		width: 361px;
		height: 480px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#Culpa_qui_officia_deserunt_mol_y {
		position: absolute;
		left: 410px;
		top: 130px;
		overflow: visible;
		width: 361px;
		height: 480px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#Behavioural_Usability_Testing {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 361px;
		height: 80px;
		line-height: 40px;
		margin-top: -5px;
		text-align: left;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 30px;
		color: rgba(136,136,136,1);
	}
	#_Excepteur_sint_occaecat_cupid_ {
		position: absolute;
		left: 820px;
		top: 372px;
		overflow: visible;
		width: 361px;
		height: 150px;
		line-height: 30px;
		margin-top: -5px;
		text-align: left;
		font-family: Georgia;
		font-style: italic;
		font-weight: normal;
		font-size: 20px;
		color: rgba(136,136,136,1);
	}
	.Rectangle_8_ {
		position: absolute;
		overflow: visible;
		width: 360px;
		height: 2px;
		left: 820px;
		top: 330px;
	}
	#Footer_6 {
		position: absolute;
		width: 1920px;
		height: 1080px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	.Base {
		filter: drop-shadow(0px 4px 6px rgba(0, 0, 0, 0.161));
		overflow: visible;
		position: absolute;
		width: 1938px;
		height: 1098px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#text_ {
		position: absolute;
		width: 659px;
		height: 141px;
		left: 631px;
		top: 470px;
		overflow: visible;
	}
	#Thesis_Showcase {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 660px;
		height: 53px;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 40px;
		color: rgba(255,255,255,1);
	}
	#Lorem_ipsum_dolor_sit_amet__co_ {
		position: absolute;
		left: 113px;
		top: 74px;
		overflow: visible;
		width: 433px;
		height: 67px;
		line-height: 24px;
		margin-top: -5px;
		text-align: center;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(255,255,255,1);
	}
	#Group_327 {
		position: absolute;
		width: 267.148px;
		height: 45.879px;
		left: 822.06px;
		top: 2205.32px;
		overflow: visible;
	}
	#Writing {
		position: absolute;
		left: 0px;
		top: 11.879px;
		overflow: visible;
		width: 111px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: bold;
		font-size: 27px;
		color: rgba(108,147,251,1);
		letter-spacing: 0.5px;
	}
	#Drawing {
		position: absolute;
		left: 151.148px;
		top: 11.879px;
		overflow: visible;
		width: 117px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 27px;
		color: rgba(117,117,117,1);
		letter-spacing: 0.5px;
	}
	.Path_53 {
		overflow: visible;
		position: absolute;
		width: 91.432px;
		height: 2px;
		left: 11px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Rectangle_1094 {
		filter: drop-shadow(0px 4px 6px rgba(0, 0, 0, 0.161));
		position: absolute;
		overflow: visible;
		width: 1498px;
		height: 578px;
		left: 220px;
		top: 2358px;
	}
	#Group_330 {
		position: absolute;
		width: 261.148px;
		height: 45.879px;
		left: 823.06px;
		top: 4444.32px;
		overflow: visible;
	}
	#Graph_1 {
		position: absolute;
		left: 0px;
		top: 11.879px;
		overflow: visible;
		width: 109px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: bold;
		font-size: 27px;
		color: rgba(108,147,251,1);
		letter-spacing: 0.5px;
	}
	#Graph_2 {
		position: absolute;
		left: 155.148px;
		top: 11.879px;
		overflow: visible;
		width: 107px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 27px;
		color: rgba(117,117,117,1);
		letter-spacing: 0.5px;
	}
	.Path_53_bf {
		overflow: visible;
		position: absolute;
		width: 104.432px;
		height: 2px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Rectangle_1095 {
		filter: drop-shadow(0px 4px 6px rgba(0, 0, 0, 0.161));
		position: absolute;
		overflow: visible;
		width: 1498px;
		height: 578px;
		left: 220px;
		top: 4597px;
	}
	.Line_146 {
		overflow: visible;
		position: absolute;
		width: 1480.354px;
		height: 560.934px;
		left: 220.5px;
		top: 2358.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Line_147 {
		overflow: visible;
		position: absolute;
		width: 1480.354px;
		height: 560.934px;
		left: 220.5px;
		top: 2358.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Line_148 {
		overflow: visible;
		position: absolute;
		width: 1480.708px;
		height: 561.871px;
		left: 220.5px;
		top: 2358.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Line_150 {
		overflow: visible;
		position: absolute;
		width: 1480.708px;
		height: 561.871px;
		left: 220.5px;
		top: 4597.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Line_149 {
		overflow: visible;
		position: absolute;
		width: 1480.708px;
		height: 561.871px;
		left: 220.5px;
		top: 2358.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Line_151 {
		overflow: visible;
		position: absolute;
		width: 1480.708px;
		height: 561.871px;
		left: 220.5px;
		top: 4597.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Post_Thumbnails_bn {
		position: absolute;
		width: 1920px;
		height: 1080px;
		left: 0px;
		top: 10801px;
		overflow: visible;
	}
	.Rectangle_78_bo {
		position: absolute;
		overflow: visible;
		width: 1920px;
		height: 1080px;
		left: 0px;
		top: 0px;
	}
	#Footer_6_bp {
		position: absolute;
		width: 1920px;
		height: 1080px;
		left: 0px;
		top: 10800px;
		overflow: visible;
	}
	.Base_bq {
		filter: drop-shadow(0px 3px 6px rgba(0, 0, 0, 0.161));
		overflow: visible;
		position: absolute;
		width: 1938px;
		height: 1098px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#text_br {
		position: absolute;
		width: 659px;
		height: 141px;
		left: 631px;
		top: 470px;
		overflow: visible;
	}
	#Conclusion {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: hidden;
		width: 660px;
		height: 49px;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 40px;
		color: rgba(255,255,255,1);
	}
	#Lorem_ipsum_dolor_sit_amet__co_bt {
		position: absolute;
		left: 113px;
		top: 74px;
		overflow: visible;
		width: 433px;
		height: 67px;
		line-height: 24px;
		margin-top: -5px;
		text-align: center;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(255,255,255,1);
	}
	.Ellipse_253 {
		position: absolute;
		overflow: visible;
		width: 80px;
		height: 80px;
		left: 1740px;
		top: 11712px;
	}
	.path {
		overflow: visible;
		position: absolute;
		width: 20px;
		height: 20px;
		transform: matrix(1,0,0,1,1770,11742) rotate(-90deg);
		transform-origin: center;
		left: 0px;
		top: 0px;
	}
	#_1 {
		position: absolute;
		width: 151.465px;
		height: 63.065px;
		left: 1704.1px;
		top: 11632.078px;
		overflow: visible;
	}
	.Union_2 {
		overflow: visible;
		position: absolute;
		width: 152.465px;
		height: 64.271px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Back_to_Top {
		position: absolute;
		left: 24.67px;
		top: 15.04px;
		overflow: visible;
		width: 103px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: bold;
		font-size: 18px;
		color: rgba(255,255,255,1);
	}
	#Post_Thumbnails_bz {
		position: absolute;
		width: 1920px;
		height: 1080px;
		left: 0px;
		top: 9720px;
		overflow: visible;
	}
	.Rectangle_78_b {
		filter: drop-shadow(0px 4px 6px rgba(0, 0, 0, 0.161));
		position: absolute;
		overflow: visible;
		width: 1938px;
		height: 1098px;
		left: 0px;
		top: 0px;
	}
	#Post_Thumbnails_b {
		position: absolute;
		width: 1920px;
		height: 1080px;
		left: 0px;
		top: 8640px;
		overflow: visible;
	}
	.Path_242 {
		filter: drop-shadow(0px 4px 6px rgba(0, 0, 0, 0.161));
		overflow: visible;
		position: absolute;
		width: 1938px;
		height: 1098px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Post_Thumbnails_ca {
		position: absolute;
		width: 1920px;
		height: 1080px;
		left: 0px;
		top: 7560px;
		overflow: visible;
	}
	.Path_243 {
		filter: drop-shadow(0px 4px 6px rgba(0, 0, 0, 0.161));
		overflow: visible;
		position: absolute;
		width: 1938px;
		height: 1098px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Call_to_Action {
		position: absolute;
		width: 685px;
		height: 45px;
		left: 1015px;
		top: 8011px;
		overflow: visible;
	}
	#Design_Idea__1 {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: hidden;
		width: 686px;
		height: 45px;
		line-height: 50px;
		margin-top: -5px;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 40px;
		color: rgba(108,147,251,1);
	}
	.Path_235 {
		overflow: visible;
		position: absolute;
		width: 188.408px;
		height: 70.198px;
		left: 1265.1px;
		top: 8092.802px;
		transform: matrix(1,0,0,1,0,0);
	}
	#LIKE_ci {
		position: absolute;
		left: 1325.226px;
		top: 8106.389px;
		overflow: visible;
		width: 67px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: bold;
		font-size: 32px;
		color: rgba(108,147,251,1);
		letter-spacing: 0.5px;
	}
	#Call_to_Action_b {
		position: absolute;
		width: 685px;
		height: 57px;
		left: 1015px;
		top: 8011px;
		overflow: visible;
	}
	#Design_Idea__1_ca {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 686px;
		height: 57px;
		line-height: 50px;
		margin-top: -5px;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 40px;
		color: rgba(108,147,251,1);
	}
	#Call_to_Action_cb {
		position: absolute;
		width: 685px;
		height: 52px;
		left: 1015px;
		top: 9091px;
		overflow: visible;
	}
	#Design_Idea__2 {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 686px;
		height: 52px;
		line-height: 50px;
		margin-top: -5px;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 40px;
		color: rgba(230,55,197,1);
	}
	#Call_to_Action_cd {
		position: absolute;
		width: 685px;
		height: 54px;
		left: 1015px;
		top: 10185px;
		overflow: visible;
	}
	#Design_Idea__3 {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 686px;
		height: 54px;
		line-height: 50px;
		margin-top: -5px;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 40px;
		color: rgba(255,109,82,1);
	}
	.Path_236 {
		overflow: visible;
		position: absolute;
		width: 188.408px;
		height: 70.198px;
		left: 1265.1px;
		top: 8092.801px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Path_237 {
		overflow: visible;
		position: absolute;
		width: 188.408px;
		height: 70.198px;
		left: 1265.1px;
		top: 9172.801px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Path_238 {
		overflow: visible;
		position: absolute;
		width: 188.408px;
		height: 70.198px;
		left: 1265.1px;
		top: 10266.801px;
		transform: matrix(1,0,0,1,0,0);
	}
	#LIKE_ci {
		position: absolute;
		left: 1325.226px;
		top: 8106.389px;
		overflow: visible;
		width: 67px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: bold;
		font-size: 32px;
		color: rgba(108,147,251,1);
		letter-spacing: 0.5px;
	}
	#LIKE_cj {
		position: absolute;
		left: 1325.226px;
		top: 9186.389px;
		overflow: visible;
		width: 67px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: bold;
		font-size: 32px;
		color: rgba(230,55,197,1);
		letter-spacing: 0.5px;
	}
	#LIKE_ck {
		position: absolute;
		left: 1325.226px;
		top: 10280.389px;
		overflow: visible;
		width: 67px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: bold;
		font-size: 32px;
		color: rgba(255,109,82,1);
		letter-spacing: 0.5px;
	}
	#Post_Thumbnails_cl {
		position: absolute;
		width: 1920px;
		height: 2160px;
		left: 0px;
		top: 5400px;
		overflow: visible;
	}
	.Path_239_cm {
		filter: drop-shadow(0px 4px 6px rgba(0, 0, 0, 0.161));
		overflow: visible;
		position: absolute;
		width: 1938px;
		height: 2178px;
		left: 0px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Group_327_cn {
		position: absolute;
		width: 289.148px;
		height: 45.879px;
		left: 809.06px;
		top: 6523.319px;
		overflow: visible;
	}
	#Diagram_1 {
		position: absolute;
		left: 0px;
		top: 11.88px;
		overflow: visible;
		width: 137px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: bold;
		font-size: 27px;
		color: rgba(108,147,251,1);
		letter-spacing: 0.5px;
	}
	#Diagram_2 {
		position: absolute;
		left: 155.148px;
		top: 11.88px;
		overflow: visible;
		width: 135px;
		white-space: nowrap;
		text-align: center;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 27px;
		color: rgba(117,117,117,1);
		letter-spacing: 0.5px;
	}
	.Path_53_cq {
		overflow: visible;
		position: absolute;
		width: 129.432px;
		height: 2px;
		left: 1px;
		top: 0px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Rectangle_1094_cr {
		filter: drop-shadow(0px 4px 6px rgba(0, 0, 0, 0.161));
		position: absolute;
		overflow: visible;
		width: 1498px;
		height: 578px;
		left: 220px;
		top: 6676px;
	}
	.Line_144 {
		overflow: visible;
		position: absolute;
		width: 1480.708px;
		height: 561.871px;
		left: 220.5px;
		top: 6676.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	.Line_145 {
		overflow: visible;
		position: absolute;
		width: 1480.708px;
		height: 561.871px;
		left: 220.5px;
		top: 6676.5px;
		transform: matrix(1,0,0,1,0,0);
	}
	#Post_Preview_cu {
		position: absolute;
		width: 1180px;
		height: 610px;
		left: 370px;
		top: 5650px;
		overflow: visible;
	}
	#text_cv {
		position: absolute;
		width: 1180px;
		height: 610px;
		left: 0px;
		top: 0px;
		overflow: visible;
	}
	#Lorem_ipsum_dolor_sit_amet__co_cw {
		position: absolute;
		left: 820px;
		top: 130px;
		overflow: visible;
		width: 361px;
		height: 160px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#Culpa_qui_officia_deserunt_mol_cx {
		position: absolute;
		left: 0px;
		top: 130px;
		overflow: visible;
		width: 361px;
		height: 480px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#Culpa_qui_officia_deserunt_mol_cy {
		position: absolute;
		left: 410px;
		top: 130px;
		overflow: visible;
		width: 361px;
		height: 480px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#Attitudinal_Focus_Groups {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 361px;
		height: 80px;
		line-height: 40px;
		margin-top: -5px;
		text-align: left;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 30px;
		color: rgba(136,136,136,1);
	}
	#_Excepteur_sint_occaecat_cupid_c {
		position: absolute;
		left: 820px;
		top: 372px;
		overflow: visible;
		width: 361px;
		height: 150px;
		line-height: 30px;
		margin-top: -5px;
		text-align: left;
		font-family: Georgia;
		font-style: italic;
		font-weight: normal;
		font-size: 20px;
		color: rgba(136,136,136,1);
	}
	.Rectangle_8_c {
		position: absolute;
		overflow: visible;
		width: 360px;
		height: 2px;
		left: 820px;
		top: 330px;
	}
	#Group_331 {
		position: absolute;
		width: 360px;
		height: 512px;
		left: 419px;
		top: 7844px;
		overflow: visible;
	}
	#Lorem_ipsum_dolor_sit_amet__co_c {
		position: absolute;
		left: 0px;
		top: 120px;
		overflow: visible;
		width: 361px;
		height: 160px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#_Excepteur_sint_occaecat_cupid_da {
		position: absolute;
		left: 0px;
		top: 362px;
		overflow: visible;
		width: 361px;
		height: 150px;
		line-height: 30px;
		margin-top: -5px;
		text-align: left;
		font-family: Georgia;
		font-style: italic;
		font-weight: normal;
		font-size: 20px;
		color: rgba(136,136,136,1);
	}
	.Rectangle_1096 {
		position: absolute;
		overflow: visible;
		width: 360px;
		height: 2px;
		left: 0px;
		top: 320px;
	}
	#Description {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 361px;
		height: 80px;
		line-height: 40px;
		margin-top: -5px;
		text-align: left;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 30px;
		color: rgba(136,136,136,1);
	}
	#Group_332 {
		position: absolute;
		width: 360px;
		height: 512px;
		left: 419px;
		top: 8924px;
		overflow: visible;
	}
	#Lorem_ipsum_dolor_sit_amet__co_da {
		position: absolute;
		left: 0px;
		top: 120px;
		overflow: visible;
		width: 361px;
		height: 160px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#_Excepteur_sint_occaecat_cupid_db {
		position: absolute;
		left: 0px;
		top: 362px;
		overflow: visible;
		width: 361px;
		height: 150px;
		line-height: 30px;
		margin-top: -5px;
		text-align: left;
		font-family: Georgia;
		font-style: italic;
		font-weight: normal;
		font-size: 20px;
		color: rgba(136,136,136,1);
	}
	.Rectangle_1096_da {
		position: absolute;
		overflow: visible;
		width: 360px;
		height: 2px;
		left: 0px;
		top: 320px;
	}
	#Description_db {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 361px;
		height: 80px;
		line-height: 40px;
		margin-top: -5px;
		text-align: left;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 30px;
		color: rgba(136,136,136,1);
	}
	#Group_333 {
		position: absolute;
		width: 360px;
		height: 512px;
		left: 419px;
		top: 10004px;
		overflow: visible;
	}
	#Lorem_ipsum_dolor_sit_amet__co_dd {
		position: absolute;
		left: 0px;
		top: 120px;
		overflow: visible;
		width: 361px;
		height: 160px;
		line-height: 24px;
		margin-top: -5px;
		text-align: left;
		font-family: Arial;
		font-style: normal;
		font-weight: normal;
		font-size: 14px;
		color: rgba(136,136,136,1);
	}
	#_Excepteur_sint_occaecat_cupid_de {
		position: absolute;
		left: 0px;
		top: 362px;
		overflow: visible;
		width: 361px;
		height: 150px;
		line-height: 30px;
		margin-top: -5px;
		text-align: left;
		font-family: Georgia;
		font-style: italic;
		font-weight: normal;
		font-size: 20px;
		color: rgba(136,136,136,1);
	}
	.Rectangle_1096_df {
		position: absolute;
		overflow: visible;
		width: 360px;
		height: 2px;
		left: 0px;
		top: 320px;
	}
	#Description_dg {
		position: absolute;
		left: 0px;
		top: 0px;
		overflow: visible;
		width: 361px;
		height: 80px;
		line-height: 40px;
		margin-top: -5px;
		text-align: left;
		font-family: Source Sans Pro;
		font-style: normal;
		font-weight: normal;
		font-size: 30px;
		color: rgba(136,136,136,1);
	}
</style>
<script id="applicationScript">
///////////////////////////////////////
// INITIALIZATION
///////////////////////////////////////

/**
 * Functionality for scaling, showing by media query, and navigation between multiple pages on a single page. 
 * Code subject to change.
 **/

if (window.console==null) { window["console"] = { log : function() {} } }; // some browsers do not set console

var Application = function() {
	// event constants
	this.NAVIGATION_CHANGE = "viewChange";
	this.VIEW_NOT_FOUND = "viewNotFound";
	this.VIEW_CHANGE = "viewChange";
	this.STATE_NOT_FOUND = "stateNotFound";
	this.APPLICATION_COMPLETE = "applicationComplete";
	this.APPLICATION_RESIZE = "applicationResize";
	this.SIZE_STATE_NAME = "data-is-view-scaled";

	this.lastView = null;
	this.lastState = null;
	this.lastOverlay = null;
	this.currentView = null;
	this.currentState = null;
	this.currentOverlay = null;
	this.currentQuery = {index: 0, rule: null, mediaText: null, id: null};
	this.inclusionQuery = "(min-width: 0px)";
	this.exclusionQuery = "none and (min-width: 99999px)";
	this.LastModifiedDateLabelName = "LastModifiedDateLabel";
	this.viewScaleSliderId = "ViewScaleSliderInput";
	this.pageRefreshedName = "showPageRefreshedNotification";
	this.prefix = "--web-";
	this.applicationStylesheet = null;
	this.mediaQueryDictionary = {};
	this.viewsDictionary = {};
	this.addedViews = [];
	this.views = {};
	this.viewIds = [];
	this.viewIds = [];
	this.viewQueries = {};
	this.overlays = {};
	this.overlayIds = [];
	this.numberOfViews = 0;
	this.verticalPadding = 0;
	this.horizontalPadding = 0;
	this.stateName = null;
	this.viewScale = 1;
	this.viewLeft = 0;
	this.viewTop = 0;

	// view settings
	this.showUpdateNotification = false;
	this.showNavigationControls = false;
	this.scaleViewsToFit = false;
	this.scaleToFitOnDoubleClick = false;
	this.actualSizeOnDoubleClick = false;
	this.scaleViewsOnResize = false;
	this.navigationOnKeypress = false;
	this.showViewName = false;
	this.enableDeepLinking = true;
	this.refreshPageForChanges = false;
	this.showRefreshNotifications = true;

	// view controls
	this.scaleViewSlider = null;
	this.lastModifiedLabel = null;
	this.supportsPopState = false; // window.history.pushState!=null;
	this.initialized = false;

	// refresh properties
	this.refreshDuration = 250;
	this.lastModifiedDate = null;
	this.refreshRequest = null;
	this.refreshInterval = null;
	this.refreshContent = null;
	this.refreshContentSize = null;
	this.refreshCheckContent = false;
	this.refreshCheckContentSize = false;

	var self = this;

	self.initialize = function(event) {
		var view = self.getVisibleView();
		if (view==null) view = self.getInitialView();
		self.collectViews();
		self.collectOverlays();
		self.collectMediaQueries();
		self.setViewOptions(view);
		self.setViewVariables(view);

		// sometimes the body size is 0 so we call this now and again later
		if (self.initialized) {
			window.addEventListener(self.NAVIGATION_CHANGE, self.viewChangeHandler);
			window.addEventListener("keyup", self.keypressHandler);
			window.addEventListener("keypress", self.keypressHandler);
			window.addEventListener("resize", self.resizeHandler);
			window.document.addEventListener("dblclick", self.doubleClickHandler);

			if (self.supportsPopState) {
				window.addEventListener('popstate', self.popStateHandler);
			}
			else {
				window.addEventListener('hashchange', self.hashChangeHandler);
			}

			// we are ready to go
			window.dispatchEvent(new Event(self.APPLICATION_COMPLETE));
		}

		if (self.initialized==false) {
			if (self.showNavigationControls || (self.singlePageApplication && self.showByMediaQuery==false)) {
				self.syncronizeViewToURL();
			}
	
			if (self.refreshPageForChanges) {
				self.setupRefreshForChanges();
			}
	
			self.initialized = true;
		}
		
		if (self.scaleViewsToFit) {
			self.viewScale = self.scaleViewToFit(view);
			
			if (self.viewScale<0) {
				setTimeout(self.scaleViewToFit, 500, view);
			}
		}
		else if (view) {
			self.viewScale = self.getViewScaleValue(view);
			self.centerView(view);
			self.updateSliderValue(self.viewScale);
		}
		else {
			// no view found
		}
	
		if (self.showUpdateNotification) {
			self.showNotification();
		}
	
		//"addEventListener" in window ? null : window.addEventListener = window.attachEvent;
		//"addEventListener" in document ? null : document.addEventListener = document.attachEvent;
	}


	///////////////////////////////////////
	// AUTO REFRESH 
	///////////////////////////////////////

	self.setupRefreshForChanges = function() {
		self.refreshRequest = new XMLHttpRequest();

		if (!self.refreshRequest) {
			return false;
		}

		// get document start values immediately
		self.requestRefreshUpdate();
	}

	/**
	 * Attempt to check the last modified date by the headers 
	 * or the last modified property from the byte array (experimental)
	 **/
	self.requestRefreshUpdate = function() {
		var url = document.location.href;
		var protocol = window.location.protocol;
		var method;
		
		try {

			if (self.refreshCheckContentSize) {
				self.refreshRequest.open('HEAD', url, true);
			}
			else if (self.refreshCheckContent) {
				self.refreshContent = document.documentElement.outerHTML;
				self.refreshRequest.open('GET', url, true);
				self.refreshRequest.responseType = "text";
			}
			else {

				// get page last modified date for the first call to compare to later
				if (self.lastModifiedDate==null) {

					// File system does not send headers in FF so get blob if possible
					if (protocol=="file:") {
						self.refreshRequest.open("GET", url, true);
						self.refreshRequest.responseType = "blob";
					}
					else {
						self.refreshRequest.open("HEAD", url, true);
						self.refreshRequest.responseType = "blob";
					}

					self.refreshRequest.onload = self.refreshOnLoadOnceHandler;

					// In some browsers (Chrome & Safari) this error occurs at send: 
					// 
					// Chrome - Access to XMLHttpRequest at 'file:///index.html' from origin 'null' 
					// has been blocked by CORS policy: 
					// Cross origin requests are only supported for protocol schemes: 
					// http, data, chrome, chrome-extension, https.
					// 
					// Safari - XMLHttpRequest cannot load file:///Users/user/Public/index.html. Cross origin requests are only supported for HTTP.
					// 
					// Solution is to run a local server, set local permissions or test in another browser
					self.refreshRequest.send(null);

					// In MS browsers the following behavior occurs possibly due to an AJAX call to check last modified date: 
					// 
					// DOM7011: The code on this page disabled back and forward caching.

					// In Brave (Chrome) error when on the server
					// index.js:221 HEAD https://www.example.com/ net::ERR_INSUFFICIENT_RESOURCES
					// self.refreshRequest.send(null);

				}
				else {
					self.refreshRequest = new XMLHttpRequest();
					self.refreshRequest.onreadystatechange = self.refreshHandler;
					self.refreshRequest.ontimeout = function() {
						self.log("Couldn't find page to check for updates");
					}
					
					var method;
					if (protocol=="file:") {
						method = "GET";
					}
					else {
						method = "HEAD";
					}

					//refreshRequest.open('HEAD', url, true);
					self.refreshRequest.open(method, url, true);
					self.refreshRequest.responseType = "blob";
					self.refreshRequest.send(null);
				}
			}
		}
		catch (error) {
			self.log("Refresh failed for the following reason:")
			self.log(error);
		}
	}

	self.refreshHandler = function() {
		var contentSize;

		try {

			if (self.refreshRequest.readyState === XMLHttpRequest.DONE) {
				
				if (self.refreshRequest.status === 2 || 
					self.refreshRequest.status === 200) {
					var pageChanged = false;

					self.updateLastModifiedLabel();

					if (self.refreshCheckContentSize) {
						var lastModifiedHeader = self.refreshRequest.getResponseHeader("Last-Modified");
						contentSize = self.refreshRequest.getResponseHeader("Content-Length");
						//lastModifiedDate = refreshRequest.getResponseHeader("Last-Modified");
						var headers = self.refreshRequest.getAllResponseHeaders();
						var hasContentHeader = headers.indexOf("Content-Length")!=-1;
						
						if (hasContentHeader) {
							contentSize = self.refreshRequest.getResponseHeader("Content-Length");

							// size has not been set yet
							if (self.refreshContentSize==null) {
								self.refreshContentSize = contentSize;
								// exit and let interval call this method again
								return;
							}

							if (contentSize!=self.refreshContentSize) {
								pageChanged = true;
							}
						}
					}
					else if (self.refreshCheckContent) {

						if (self.refreshRequest.responseText!=self.refreshContent) {
							pageChanged = true;
						}
					}
					else {
						lastModifiedHeader = self.getLastModified(self.refreshRequest);

						if (self.lastModifiedDate!=lastModifiedHeader) {
							self.log("lastModifiedDate:" + self.lastModifiedDate + ",lastModifiedHeader:" +lastModifiedHeader);
							pageChanged = true;
						}

					}

					
					if (pageChanged) {
						clearInterval(self.refreshInterval);
						self.refreshUpdatedPage();
						return;
					}

				}
				else {
					self.log('There was a problem with the request.');
				}

			}
		}
		catch( error ) {
			//console.log('Caught Exception: ' + error);
		}
	}

	self.refreshOnLoadOnceHandler = function(event) {

		// get the last modified date
		if (self.refreshRequest.response) {
			self.lastModifiedDate = self.getLastModified(self.refreshRequest);

			if (self.lastModifiedDate!=null) {

				if (self.refreshInterval==null) {
					self.refreshInterval = setInterval(self.requestRefreshUpdate, self.refreshDuration);
				}
			}
			else {
				self.log("Could not get last modified date from the server");
			}
		}
	}

	self.refreshUpdatedPage = function() {
		if (self.showRefreshNotifications) {
			var date = new Date().setTime((new Date().getTime()+10000));
			document.cookie = encodeURIComponent(self.pageRefreshedName) + "=true" + "; max-age=6000;" + " path=/";
		}

		document.location.reload(true);
	}

	self.showNotification = function(duration) {
		var notificationID = self.pageRefreshedName+"ID";
		var notification = document.getElementById(notificationID);
		if (duration==null) duration = 4000;

		if (notification!=null) {return;}

		notification = document.createElement("div");
		notification.id = notificationID;
		notification.textContent = "PAGE UPDATED";
		var styleRule = ""
		styleRule = "position: fixed; padding: 7px 16px 6px 16px; font-family: Arial, sans-serif; font-size: 10px; font-weight: bold; left: 50%;";
		styleRule += "top: 20px; background-color: rgba(0,0,0,.5); border-radius: 12px; color:rgb(235, 235, 235); transition: all 2s linear;";
		styleRule += "transform: translateX(-50%); letter-spacing: .5px; filter: drop-shadow(2px 2px 6px rgba(0, 0, 0, .1))";
		notification.setAttribute("style", styleRule);

		notification.className= "PageRefreshedClass";
		
		document.body.appendChild(notification);

		setTimeout(function() {
			notification.style.opacity = "0";
			notification.style.filter = "drop-shadow( 0px 0px 0px rgba(0,0,0, .5))";
			setTimeout(function() {
				notification.parentNode.removeChild(notification);
			}, duration)
		}, duration);

		document.cookie = encodeURIComponent(self.pageRefreshedName) + "=; max-age=1; path=/";
	}

	/**
	 * Get the last modified date from the header 
	 * or file object after request has been received
	 **/
	self.getLastModified = function(request) {
		var date;

		// file protocol - FILE object with last modified property
		if (request.response && request.response.lastModified) {
			date = request.response.lastModified;
		}
		
		// http protocol - check headers
		if (date==null) {
			date = request.getResponseHeader("Last-Modified");
		}

		return date;
	}

	self.updateLastModifiedLabel = function() {
		var labelValue = "";
		
		if (self.lastModifiedLabel==null) {
			self.lastModifiedLabel = document.getElementById("LastModifiedLabel");
		}

		if (self.lastModifiedLabel) {
			var seconds = parseInt(((new Date().getTime() - Date.parse(document.lastModified)) / 1000 / 60) * 100 + "");
			var minutes = 0;
			var hours = 0;

			if (seconds < 60) {
				seconds = Math.floor(seconds/10)*10;
				labelValue = seconds + " seconds";
			}
			else {
				minutes = parseInt((seconds/60) + "");

				if (minutes>60) {
					hours = parseInt((seconds/60/60) +"");
					labelValue += hours==1 ? " hour" : " hours";
				}
				else {
					labelValue = minutes+"";
					labelValue += minutes==1 ? " minute" : " minutes";
				}
			}
			
			if (seconds<10) {
				labelValue = "Updated now";
			}
			else {
				labelValue = "Updated " + labelValue + " ago";
			}

			if (self.lastModifiedLabel.firstElementChild) {
				self.lastModifiedLabel.firstElementChild.textContent = labelValue;

			}
			else if ("textContent" in self.lastModifiedLabel) {
				self.lastModifiedLabel.textContent = labelValue;
			}
		}
	}

	self.getShortString = function(string, length) {
		if (length==null) length = 30;
		string = string!=null ? string.substr(0, length).replace(/\n/g, "") : "[String is null]";
		return string;
	}

	self.getShortNumber = function(value, places) {
		if (places==null || places<1) places = 4;
		value = Math.round(value * Math.pow(10,places)) / Math.pow(10, places);
		return value;
	}

	///////////////////////////////////////
	// NAVIGATION CONTROLS
	///////////////////////////////////////

	self.updateViewLabel = function() {
		var viewNavigationLabel = document.getElementById("ViewNavigationLabel");
		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;
		var viewName = view ? self.getViewPreferenceValue(view, self.prefix + "view-name") : null;
		var viewId = view ? view.id : null;

		if (viewNavigationLabel && view) {
			if (viewName && viewName.indexOf('"')!=-1) {
				viewName = viewName.replace(/"/g, "");
			}

			if (self.showViewName) {
				viewNavigationLabel.textContent = viewName;
				self.setTooltip(viewNavigationLabel, viewIndex + 1 + " of " + self.numberOfViews);
			}
			else {
				viewNavigationLabel.textContent = viewIndex + 1 + " of " + self.numberOfViews;
				self.setTooltip(viewNavigationLabel, viewName);
			}

		}
	}

	self.updateURL = function(view) {
		view = view == null ? self.getVisibleView() : view;
		var viewId = view ? view.id : null
		var viewFragment = view ? "#"+ viewId : null;

		if (viewId && self.viewIds.length>1 && self.enableDeepLinking) {

			if (self.supportsPopState==false) {
				self.setFragment(viewId);
			}
			else {
				if (viewFragment!=window.location.hash) {

					if (window.location.hash==null) {
						window.history.replaceState({name:viewId}, null, viewFragment);
					}
					else {
						window.history.pushState({name:viewId}, null, viewFragment);
					}
				}
			}
		}
	}

	self.setFragment = function(value) {
		window.location.hash = "#" + value;
	}

	self.setTooltip = function(element, value) {
		// setting the tooltip in edge causes a page crash on hover
		if (/Edge/.test(navigator.userAgent)) { return; }

		if ("title" in element) {
			element.title = value;
		}
	}

	self.getStylesheetRules = function(styleSheet) {
		try {
			if (styleSheet) return styleSheet.cssRules || styleSheet.rules;
	
			return document.styleSheets[0]["cssRules"] || document.styleSheets[0]["rules"];
		}
		catch (error) {
			// ERRORS:
			// SecurityError: The operation is insecure.
			// Errors happen when script loads before stylesheet or loading an external css locally

			// InvalidAccessError: A parameter or an operation is not supported by the underlying object
			// Place script after stylesheet

			console.log(error);
			if (error.toString().indexOf("The operation is insecure")!=-1) {
				console.log("Load the stylesheet before the script or load the stylesheet inline until it can be loaded on a server")
			}
			return [];
		}
	}

	/**
	 * If single page application hide all of the views. 
	 * @param {Number} selectedIndex if provided shows the view at index provided
	 **/
	self.hideViews = function(selectedIndex, animation) {
		var rules = self.getStylesheetRules();
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];

			if (rule.media!=null) {

				if (queryIndex==selectedIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = selectedIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
				}
				else {
					if (animation) {
						self.fadeOut(rule)
					}
					else {
						self.disableMediaQuery(rule);
					}
				}
				
				queryIndex++;
			}
		}

		self.numberOfViews = queryIndex;
		self.updateViewLabel();
		self.updateURL();

		self.dispatchViewChange();

		var view = self.getVisibleView();
		var viewIndex = view ? self.getViewIndex(view) : -1;

		return viewIndex==selectedIndex ? view : null;
	}

	/**
	 * Hide view
	 * @param {Object} view element to hide
	 **/
	self.hideView = function(view) {
		var rule = view ? self.mediaQueryDictionary[view.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);
		}
	}

	/**
	 * Hide overlay
	 * @param {Object} overlay element to hide
	 **/
	self.hideOverlay = function(overlay) {
		var rule = overlay ? self.mediaQueryDictionary[overlay.id] : null;

		if (rule) {
			self.disableMediaQuery(rule);

			//if (self.showByMediaQuery) {
				overlay.style.display = "none";
			//}
		}
	}

	/**
	 * Show the view by media query. Does not hide current views
	 * Sets view options by default
	 * @param {Object} view element to show
	 * @param {Boolean} setViewOptions sets view options if null or true
	 */
	self.showViewByMediaQuery = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var display = null;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);
			if (view && setViewOptions) self.setViewOptions(view);
			if (view && setViewOptions) self.setViewVariables(view);
		}
	}

	/**
	 * Show the view. Does not hide current views
	 */
	self.showView = function(view, setViewOptions) {
		var id = view ? view.id : null;
		var query = id ? self.mediaQueryDictionary[id] : null;
		var display = null;
		setViewOptions = setViewOptions==null ? true : setViewOptions;

		if (query) {
			self.enableMediaQuery(query);
			if (view==null) view =self.getVisibleView();
			if (view && setViewOptions) self.setViewOptions(view);
		}
		else if (id) {
			display = window.getComputedStyle(view).getPropertyValue("display");
			if (display=="" || display=="none") {
				view.style.display = "block";
			}
		}

		if (view) {
			if (self.currentView!=null) {
				self.lastView = self.currentView;
			}

			self.currentView = view;
		}
	}

	self.showViewById = function(id, setViewOptions) {
		var view = id ? self.getViewById(id) : null;

		if (view) {
			self.showView(view);
			return;
		}

		self.log("View not found '" + id + "'");
	}

	/**
	 * Show overlay over view
	 * @param {String} id id of view or view reference
	 * @param {Number} x x location
	 * @param {Number} y y location
	 * @param {Event | HTMLElement} event event or html element with styles applied
	 */
	self.showOverlay = function(id, x, y, event) {
		var overlay = id && typeof id === 'string' ? self.getViewById(id) : id ? id : null;
		var query = overlay ? self.mediaQueryDictionary[overlay.id] : null;
		var centerHorizontally = false;
		var centerVertically = false;
		var display = null;

		// get enter animation - event target must have css variables declared
		if (event) {
			var button = event.currentTarget || event; // can be event or htmlelement
			var buttonComputedStyles = getComputedStyle(button);
			var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
			var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
			var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
			var actionTarget = self.application ? null : self.getElement(actionTargetValue);
			var actionTargetStyles = actionTarget ? actionTarget.style : null;

			if (actionTargetStyles) {
				actionTargetStyles.setProperty("animation", animation);
			}

			if ("stopImmediatePropagation" in event) {
				event.stopImmediatePropagation();
			}
		}
		
		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// remove any current overlays
		if (self.currentOverlay) {
			self.removeOverlay();
		}

		if (query) {
			//self.setElementAnimation(overlay, null);
			//overlay.style.animation = animation;
			self.enableMediaQuery(query);
			
			var display = overlay && overlay.style.display;
			
			if (overlay && display=="" || display=="none") {
				overlay.style.display = "block";
				self.setViewOptions(overlay);
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}
		else if (id) {
			if (overlay==null || overlay==false) {
				self.log("Overlay not found, '"+ id + "'");
				return;
			}

			display = window.getComputedStyle(overlay).getPropertyValue("display");

			if (display=="" || display=="none") {
				overlay.style.display = "block";
			}

			// add animation defined in event target style declaration
			if (animation && self.supportAnimations) {
				self.fadeIn(overlay, false, animation);
			}
		}

		// do not set x or y position if centering
		centerHorizontally = self.getViewPreferenceBoolean(overlay, self.prefix + "center-horizontally", false);
		centerVertically = self.getViewPreferenceBoolean(overlay, self.prefix + "center-vertically", false);

		if (overlay && centerHorizontally==false) {
			overlay.style.left = x + "px";
		}
		
		if (overlay && centerVertically==false) {
			overlay.style.top = y + "px";
		}

		self.currentOverlay = overlay;
	}

	self.goBack = function() {
		if (self.currentOverlay) {
			self.removeOverlay();
		}
		else if (self.lastView) {
			self.goToView(self.lastView.id);
		}
	}

	self.removeOverlay = function(animate) {
		var overlay = self.currentOverlay;
		animate = animate===false ? false : true;

		if (overlay) {
			var style = overlay.style;
			
			if (style.animation && self.supportAnimations && animate) {
				self.reverseAnimation(overlay, true);

				var duration = self.getAnimationDuration(style.animation, true);
		
				setTimeout(function() {
					self.setElementAnimation(overlay, null);
					self.hideOverlay(overlay);
				}, duration);
			}
			else {
				self.setElementAnimation(overlay, null);
				self.hideOverlay(overlay);
			}
		}
	}

	/**
	 * Reverse the animation and hide after
	 * @param {Object} target element with animation
	 * @param {Boolean} hide hide after animation ends
	 */
	self.reverseAnimation = function(target, hide) {
		var lastAnimation = null;
		var style = target.style;

		style.animationPlayState = "paused";
		lastAnimation = style.animation;
		style.animation = null;
		style.animationPlayState = "paused";

		if (hide) {
			//target.addEventListener("animationend", self.animationEndHideHandler);
	
			var duration = self.getAnimationDuration(lastAnimation, true);
			var isOverlay = self.isOverlay(target);
	
			setTimeout(function() {
				self.setElementAnimation(target, null);

				if (isOverlay) {
					self.hideOverlay(target);
				}
				else {
					self.hideView(target);
				}
			}, duration);
		}

		setTimeout(function() {
			style.animation = lastAnimation;
			style.animationPlayState = "paused";
			style.animationDirection = "reverse";
			style.animationPlayState = "running";
		}, 30);
	}

	self.animationEndHandler = function(event) {
		var target = event.currentTarget;
		self.dispatchEvent(new Event(event.type));
	}

	self.isOverlay = function(view) {
		var result = view ? self.getViewPreferenceBoolean(view, self.prefix + "is-overlay") : false;

		return result;
	}

	self.animationEndHideHandler = function(event) {
		var target = event.currentTarget;
		self.setViewVariables(null, target);
		self.hideView(target);
		target.removeEventListener("animationend", self.animationEndHideHandler);
	}

	self.animationEndShowHandler = function(event) {
		var target = event.currentTarget;
		target.removeEventListener("animationend", self.animationEndShowHandler);
	}

	self.setViewOptions = function(view) {

		if (view) {
			self.minimumScale = self.getViewPreferenceValue(view, self.prefix + "minimum-scale");
			self.maximumScale = self.getViewPreferenceValue(view, self.prefix + "maximum-scale");
			self.scaleViewsToFit = self.getViewPreferenceBoolean(view, self.prefix + "scale-to-fit");
			self.scaleToFitType = self.getViewPreferenceValue(view, self.prefix + "scale-to-fit-type");
			self.scaleToFitOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-double-click");
			self.actualSizeOnDoubleClick = self.getViewPreferenceBoolean(view, self.prefix + "actual-size-on-double-click");
			self.scaleViewsOnResize = self.getViewPreferenceBoolean(view, self.prefix + "scale-on-resize");
			self.enableScaleUp = self.getViewPreferenceBoolean(view, self.prefix + "enable-scale-up");
			self.centerHorizontally = self.getViewPreferenceBoolean(view, self.prefix + "center-horizontally");
			self.centerVertically = self.getViewPreferenceBoolean(view, self.prefix + "center-vertically");
			self.navigationOnKeypress = self.getViewPreferenceBoolean(view, self.prefix + "navigate-on-keypress");
			self.showViewName = self.getViewPreferenceBoolean(view, self.prefix + "show-view-name");
			self.refreshPageForChanges = self.getViewPreferenceBoolean(view, self.prefix + "refresh-for-changes");
			self.refreshPageForChangesInterval = self.getViewPreferenceValue(view, self.prefix + "refresh-interval");
			self.showNavigationControls = self.getViewPreferenceBoolean(view, self.prefix + "show-navigation-controls");
			self.scaleViewSlider = self.getViewPreferenceBoolean(view, self.prefix + "show-scale-controls");
			self.enableDeepLinking = self.getViewPreferenceBoolean(view, self.prefix + "enable-deep-linking");
			self.singlePageApplication = self.getViewPreferenceBoolean(view, self.prefix + "application");
			self.showByMediaQuery = self.getViewPreferenceBoolean(view, self.prefix + "show-by-media-query");
			self.showUpdateNotification = document.cookie!="" ? document.cookie.indexOf(self.pageRefreshedName)!=-1 : false;
			self.imageComparisonDuration = self.getViewPreferenceValue(view, self.prefix + "image-comparison-duration");
			self.supportAnimations = self.getViewPreferenceBoolean(view, self.prefix + "enable-animations", true);

			if (self.scaleViewsToFit) {
				var newScaleValue = self.scaleViewToFit(view);
				
				if (newScaleValue<0) {
					setTimeout(self.scaleViewToFit, 500, view);
				}
			}
			else {
				self.viewScale = self.getViewScaleValue(view);
				self.viewToFitWidthScale = self.getViewFitToViewportWidthScale(view, self.enableScaleUp)
				self.viewToFitHeightScale = self.getViewFitToViewportScale(view, self.enableScaleUp);
				self.updateSliderValue(self.viewScale);
			}

			if (self.imageComparisonDuration!=null) {
				// todo
			}

			if (self.refreshPageForChangesInterval!=null) {
				self.refreshDuration = Number(self.refreshPageForChangesInterval);
			}
		}
	}

	self.previousView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView()
		var index = view ? self.getViewIndex(view) : -1;
		var prevQueryIndex = index!=-1 ? index-1 : self.currentQuery.index-1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;

		if (event) {
			event.stopImmediatePropagation();
		}

		if (prevQueryIndex<0) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];
			
			if (rule.media!=null) {

				if (queryIndex==prevQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = prevQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	self.nextView = function(event) {
		var rules = self.getStylesheetRules();
		var view = self.getVisibleView();
		var index = view ? self.getViewIndex(view) : -1;
		var nextQueryIndex = index!=-1 ? index+1 : self.currentQuery.index+1;
		var queryIndex = 0;
		var numberOfRules = rules!=null ? rules.length : 0;
		var numberOfMediaQueries = self.getNumberOfMediaRules();

		if (event) {
			event.stopImmediatePropagation();
		}

		if (nextQueryIndex>=numberOfMediaQueries) {
			return;
		}

		// loop through rules and hide media queries except selected
		for (var i=0;i<numberOfRules;i++) {
			var rule = rules[i];
			
			if (rule.media!=null) {

				if (queryIndex==nextQueryIndex) {
					self.currentQuery.mediaText = rule.conditionText;
					self.currentQuery.index = nextQueryIndex;
					self.currentQuery.rule = rule;
					self.enableMediaQuery(rule);
					self.updateViewLabel();
					self.updateURL();
					self.dispatchViewChange();
				}
				else {
					self.disableMediaQuery(rule);
				}

				queryIndex++;
			}
		}
	}

	/**
	 * Enables a view via media query
	 */
	self.enableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.inclusionQuery;
		}
		catch(error) {
			//self.log(error);
			rule.conditionText = self.inclusionQuery;
		}
	}

	self.disableMediaQuery = function(rule) {

		try {
			rule.media.mediaText = self.exclusionQuery;
		}
		catch(error) {
			rule.conditionText = self.exclusionQuery;
		}
	}

	self.dispatchViewChange = function() {
		try {
			var event = new Event(self.NAVIGATION_CHANGE);
			window.dispatchEvent(event);
		}
		catch (error) {
			// In IE 11: Object doesn't support this action
		}
	}

	self.getNumberOfMediaRules = function() {
		var rules = self.getStylesheetRules();
		var numberOfRules = rules ? rules.length : 0;
		var numberOfQueries = 0;

		for (var i=0;i<numberOfRules;i++) {
			if (rules[i].media!=null) { numberOfQueries++; }
		}
		
		return numberOfQueries;
	}

	/////////////////////////////////////////
	// VIEW SCALE 
	/////////////////////////////////////////

	self.sliderChangeHandler = function(event) {
		var value = self.getShortNumber(event.currentTarget.value/100);
		var view = self.getVisibleView();
		self.setViewScaleValue(view, false, value, true);
	}

	self.updateSliderValue = function(scale) {
		var slider = document.getElementById(self.viewScaleSliderId);
		var tooltip = parseInt(scale * 100 + "") + "%";
		var inputType;
		var inputValue;
		
		if (slider) {
			inputValue = self.getShortNumber(scale * 100);
			if (inputValue!=slider["value"]) {
				slider["value"] = inputValue;
			}
			inputType = slider.getAttributeNS(null, "type");

			if (inputType!="range") {
				// input range is not supported
				slider.style.display = "none";
			}

			self.setTooltip(slider, tooltip);
		}
	}

	self.viewChangeHandler = function(event) {
		var view = self.getVisibleView();
		var matrix = view ? getComputedStyle(view).transform : null;
		
		if (matrix) {
			self.viewScale = self.getViewScaleValue(view);
			
			var scaleNeededToFit = self.getViewFitToViewportScale(view);
			var isViewLargerThanViewport = scaleNeededToFit<1;
			
			// scale large view to fit if scale to fit is enabled
			if (self.scaleViewsToFit) {
				self.scaleViewToFit(view);
			}
			else {
				self.updateSliderValue(self.viewScale);
			}
		}
	}

	self.getViewScaleValue = function(view) {
		var matrix = getComputedStyle(view).transform;

		if (matrix) {
			var matrixArray = matrix.replace("matrix(", "").split(",");
			var scaleX = parseFloat(matrixArray[0]);
			var scaleY = parseFloat(matrixArray[3]);
			var scale = Math.min(scaleX, scaleY);
		}

		return scale;
	}

	/**
	 * Scales view to scale. 
	 * @param {Object} view view to scale. views are in views array
	 * @param {Boolean} scaleToFit set to true to scale to fit. set false to use desired scale value
	 * @param {Number} desiredScale scale to define. not used if scale to fit is false
	 * @param {Boolean} isSliderChange indicates if slider is callee
	 */
	self.setViewScaleValue = function(view, scaleToFit, desiredScale, isSliderChange) {
		var enableScaleUp = self.enableScaleUp;
		var scaleToFitType = self.scaleToFitType;
		var minimumScale = self.minimumScale;
		var maximumScale = self.maximumScale;
		var hasMinimumScale = !isNaN(minimumScale) && minimumScale!="";
		var hasMaximumScale = !isNaN(maximumScale) && maximumScale!="";
		var scaleNeededToFit = self.getViewFitToViewportScale(view, enableScaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, enableScaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, enableScaleUp);
		var scaleToFitFull = self.getViewFitToViewportScale(view, true);
		var scaleToFitFullWidth = self.getViewFitToViewportWidthScale(view, true);
		var scaleToFitFullHeight = self.getViewFitToViewportHeightScale(view, true);
		var scaleToWidth = scaleToFitType=="width";
		var scaleToHeight = scaleToFitType=="height";
		var shrunkToFit = false;
		var topPosition = null;
		var leftPosition = null;
		var translateY = null;
		var translateX = null;
		var transformValue = "";
		var canCenterVertically = true;
		var canCenterHorizontally = true;

		if (scaleToFit && isSliderChange!=true) {
			if (scaleToFitType=="fit" || scaleToFitType=="") {
				desiredScale = scaleNeededToFit;
			}
			else if (scaleToFitType=="width") {
				desiredScale = scaleNeededToFitWidth;
			}
			else if (scaleToFitType=="height") {
				desiredScale = scaleNeededToFitHeight;
			}
		}
		else {
			if (isNaN(desiredScale)) {
				desiredScale = 1;
			}
		}

		self.updateSliderValue(desiredScale);
		
		// scale to fit width
		if (scaleToWidth && scaleToHeight==false) {
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;

			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitWidth;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "width", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (view.style.top != topPosition) {
					view.style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (view.style.left != leftPosition) {
					view.style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			view.style.transformOrigin = "0 0";
			view.style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return desiredScale;
		}

		// scale to fit height
		if (scaleToHeight && scaleToWidth==false) {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitHeight<=scaleNeededToFitWidth && enableScaleUp==false;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			canCenterHorizontally = scaleNeededToFitWidth>=1 && enableScaleUp==false;
			
			if (isSliderChange) {
				canCenterHorizontally = desiredScale<scaleToFitFullHeight;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFitHeight;
			}

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
				//canCenterVertically = desiredScale>=scaleNeededToFitHeight && enableScaleUp==false;
			}

			desiredScale = self.getShortNumber(desiredScale);

			canCenterHorizontally = self.canCenterHorizontally(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "height", enableScaleUp, desiredScale, minimumScale, maximumScale);

			if (desiredScale>1 && (enableScaleUp || isSliderChange)) {
				transformValue = "scale(" + desiredScale + ")";
			}
			else if (desiredScale>=1 && enableScaleUp==false) {
				transformValue = "scale(" + 1 + ")";
			}
			else {
				transformValue = "scale(" + desiredScale + ")";
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (view.style.left != leftPosition) {
					view.style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (view.style.top != topPosition) {
					view.style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			view.style.transformOrigin = "0 0";
			view.style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			return scaleNeededToFitHeight;
		}

		if (scaleToFitType=="fit") {
			//canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFitWidth;
			//canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFitHeight;
			canCenterVertically = scaleNeededToFitHeight>=scaleNeededToFit;
			canCenterHorizontally = scaleNeededToFitWidth>=scaleNeededToFit;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}

			desiredScale = self.getShortNumber(desiredScale);

			if (isSliderChange || scaleToFit==false) {
				canCenterVertically = scaleToFitFullHeight>=desiredScale;
				canCenterHorizontally = desiredScale<scaleToFitFullWidth;
			}
			else if (scaleToFit) {
				desiredScale = scaleNeededToFit;
			}

			transformValue = "scale(" + desiredScale + ")";

			//canCenterHorizontally = self.canCenterHorizontally(view, "fit", false, desiredScale);
			//canCenterVertically = self.canCenterVertically(view, "fit", false, desiredScale);
			
			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (view.style.top != topPosition) {
					view.style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (view.style.left != leftPosition) {
					view.style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
			}

			view.style.transformOrigin = "0 0";
			view.style.transform = transformValue;

			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);
			
			return desiredScale;
		}

		if (scaleToFitType=="default" || scaleToFitType=="") {
			desiredScale = 1;

			if (hasMinimumScale) {
				desiredScale = Math.max(desiredScale, Number(minimumScale));
			}
			if (hasMaximumScale) {
				desiredScale = Math.min(desiredScale, Number(maximumScale));
			}

			canCenterHorizontally = self.canCenterHorizontally(view, "none", false, desiredScale, minimumScale, maximumScale);
			canCenterVertically = self.canCenterVertically(view, "none", false, desiredScale, minimumScale, maximumScale);

			if (self.centerVertically) {
				if (canCenterVertically) {
					translateY = "-50%";
					topPosition = "50%";
				}
				else {
					translateY = "0";
					topPosition = "0";
				}
				
				if (view.style.top != topPosition) {
					view.style.top = topPosition + "";
				}

				if (canCenterVertically) {
					transformValue += " translateY(" + translateY+ ")";
				}
			}

			if (self.centerHorizontally) {
				if (canCenterHorizontally) {
					translateX = "-50%";
					leftPosition = "50%";
				}
				else {
					translateX = "0";
					leftPosition = "0";
				}

				if (view.style.left != leftPosition) {
					view.style.left = leftPosition + "";
				}

				if (canCenterHorizontally) {
					transformValue += " translateX(" + translateX+ ")";
				}
				else {
					transformValue += " translateX(" + 0 + ")";
				}
			}

			view.style.transformOrigin = "0 0";
			view.style.transform = transformValue;


			self.viewScale = desiredScale;
			self.viewToFitWidthScale = scaleNeededToFitWidth;
			self.viewToFitHeightScale = scaleNeededToFitHeight;
			self.viewLeft = leftPosition;
			self.viewTop = topPosition;

			self.updateSliderValue(desiredScale);
			
			return desiredScale;
		}
	}

	/**
	 * Returns true if view can be centered horizontally
	 * @param {HTMLElement} view view
	 * @param {String} type type of scaling - width, height, all, none
	 * @param {Boolean} scaleUp if scale up enabled 
	 * @param {Number} scale target scale value 
	 */
	self.canCenterHorizontally = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? scale : scaleNeededToFitWidth;
		scaleUp = scaleUp == null ? false : scaleUp;

		if (type=="width") {
	
			if (scaleUp && maximumScale==null) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}
		else if (type=="height") {
			minScale = Math.min(1, scaleNeededToFitHeight);
			if (minimumScale!="" && maximumScale!="") {
				minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
			}
			else {
				if (minimumScale!="") {
					minScale = Math.max(minimumScale, scaleNeededToFitHeight);
				}
				if (maximumScale!="") {
					minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFitHeight));
				}
			}
	
			if (scaleUp && maximumScale=="") {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=minScale) {
				canCenter = true;
			}
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitWidth>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitWidth>=1) {
				canCenter = true;
			}
		}

		self.horizontalScrollbarsNeeded = canCenter;
		
		return canCenter;
	}

	/**
	 * Returns true if view can be centered horizontally
	 * @param {HTMLElement} view view to scale
	 * @param {String} type type of scaling
	 * @param {Boolean} scaleUp if scale up enabled 
	 * @param {Number} scale target scale value 
	 */
	self.canCenterVertically = function(view, type, scaleUp, scale, minimumScale, maximumScale) {
		var scaleNeededToFit = self.getViewFitToViewportScale(view, scaleUp);
		var scaleNeededToFitWidth = self.getViewFitToViewportWidthScale(view, scaleUp);
		var scaleNeededToFitHeight = self.getViewFitToViewportHeightScale(view, scaleUp);
		var canCenter = false;
		var minScale;

		type = type==null ? "none" : type;
		scale = scale==null ? 1 : scale;
		scaleUp = scaleUp == null ? false : scaleUp;
	
		if (type=="width") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFitWidth;
		}
		else if (type=="height") {
			minScale = Math.max(minimumScale, Math.min(maximumScale, scaleNeededToFit));
			canCenter = scaleNeededToFitHeight>=minScale;
		}
		else if (type=="fit") {
			canCenter = scaleNeededToFitHeight>=scaleNeededToFit;
		}
		else {
			if (scaleUp) {
				canCenter = false;
			}
			else if (scaleNeededToFitHeight>=1) {
				canCenter = true;
			}
		}

		self.verticalScrollbarsNeeded = canCenter;
		
		return canCenter;
	}

	self.getViewFitToViewportScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth) || isNaN(elementHeight)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;
		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}
		else if (elementWidth > availableWidth || elementHeight > availableHeight) {
			newScale = Math.min(availableHeight/elementHeight, availableWidth/elementWidth);
		}
		
		return newScale;
	}

	self.getViewFitToViewportWidthScale = function(view, scaleUp) {
		// need to get browser viewport width when element
		var isParentWindow = view && view.parentNode && view.parentNode===document.body;
		var enableScaleUp = scaleUp;
		var availableWidth = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;
		var elementWidth = parseFloat(getComputedStyle(view, "style").width);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementWidth)) {
			return newScale;
		}

		availableWidth -= self.horizontalPadding;

		if (enableScaleUp) {
			newScale = availableWidth/elementWidth;
		}
		else if (elementWidth > availableWidth) {
			newScale = availableWidth/elementWidth;
		}
		
		return newScale;
	}

	self.getViewFitToViewportHeightScale = function(view, scaleUp) {
		var enableScaleUp = scaleUp;
		var availableHeight = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;
		var elementHeight = parseFloat(getComputedStyle(view, "style").height);
		var newScale = 1;

		// if element is not added to the document computed values are NaN
		if (isNaN(elementHeight)) {
			return newScale;
		}

		availableHeight -= self.verticalPadding;

		if (enableScaleUp) {
			newScale = availableHeight/elementHeight;
		}
		else if (elementHeight > availableHeight) {
			newScale = availableHeight/elementHeight;
		}
		
		return newScale;
	}

	self.keypressHandler = function(event) {
		var rightKey = 39;
		var leftKey = 37;
		
		// listen for both events 
		if (event.type=="keypress") {
			window.removeEventListener("keyup", self.keypressHandler);
		}
		else {
			window.removeEventListener("keypress", self.keypressHandler);
		}
		
		if (self.showNavigationControls) {
			if (self.navigationOnKeypress) {
				if (event.keyCode==rightKey) {
					self.nextView();
				}
				if (event.keyCode==leftKey) {
					self.previousView();
				}
			}
		}
		else if (self.navigationOnKeypress) {
			if (event.keyCode==rightKey) {
				self.nextView();
			}
			if (event.keyCode==leftKey) {
				self.previousView();
			}
		}
	}

	///////////////////////////////////
	// GENERAL FUNCTIONS
	///////////////////////////////////

	self.getViewById = function(id) {
		id = id ? id.replace("#", "") : "";
		var view = self.viewIds.indexOf(id)!=-1 && self.getElement(id);
		return view;
	}

	self.getViewIds = function() {
		var viewIds = self.getViewPreferenceValue(document.body, self.prefix + "view-ids");
		var viewId = null;

		viewIds = viewIds!=null && viewIds!="" ? viewIds.split(",") : [];

		if (viewIds.length==0) {
			viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
			viewIds = viewId ? [viewId] : [];
		}

		return viewIds;
	}

	self.getInitialViewId = function() {
		var viewId = self.getViewPreferenceValue(document.body, self.prefix + "view-id");
		return viewId;
	}

	self.getApplicationStylesheet = function() {
		var stylesheetId = self.getViewPreferenceValue(document.body, self.prefix + "stylesheet-id");
		self.applicationStylesheet = document.getElementById("applicationStylesheet");
		return self.applicationStylesheet.sheet;
	}

	self.getVisibleView = function() {
		var viewIds = self.getViewIds();
		
		for (var i=0;i<viewIds.length;i++) {
			var viewId = viewIds[i].replace(/[\#?\.?](.*)/, "$" + "1");
			var view = self.getElement(viewId);
			var postName = "_Class";

			if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
				view = self.getElement(viewId.replace(postName, ""));
			}
			
			if (view) {
				var display = getComputedStyle(view).display;
		
				if (display=="block" || display=="flex") {
					return view;
				}
			}
		}

		return null;
	}

	self.getInitialView = function() {
		var viewId = self.getInitialViewId();
		viewId = viewId.replace(/[\#?\.?](.*)/, "$" + "1");
		var view = self.getElement(viewId);
		var postName = "_Class";

		if (view==null && viewId && viewId.lastIndexOf(postName)!=-1) {
			view = self.getElement(viewId.replace(postName, ""));
		}

		return view;
	}

	self.getViewIndex = function(view) {
		var viewIds = self.getViewIds();
		var id = view ? view.id : null;
		var index = id && viewIds ? viewIds.indexOf(id) : -1;

		return index;
	}

	self.syncronizeViewToURL = function() {
		var fragment = window.location.hash;
		var view = self.getViewById(fragment);
		var index = view ? self.getViewIndex(view) : 0;
		if (index==-1) index = 0;
		var currentView = self.hideViews(index);

		if (self.supportsPopState && currentView) {

			if (fragment==null) {
				window.history.replaceState({name:currentView.id}, null, "#"+ currentView.id);
			}
			else {
				window.history.pushState({name:currentView.id}, null, "#"+ currentView.id);
			}
		}
		
		self.setViewVariables(view);
		return view;
	}

	/**
	 * Set the currentView or currentOverlay properties and set the lastView or lastOverlay properties
	 */
	self.setViewVariables = function(view, overlay, parentView) {
		if (view) {
			if (self.currentView) {
				self.lastView = self.currentView;
			}
			self.currentView = view;
		}

		if (overlay) {
			if (self.currentOverlay) {
				self.lastOverlay = self.currentOverlay;
			}
			self.currentOverlay = overlay;
		}
	}

	self.getViewPreferenceBoolean = function(view, property, altValue) {
		var computedStyle = window.getComputedStyle(view);
		var value = computedStyle.getPropertyValue(property);
		var type = typeof value;
		
		if (value=="true" || (type=="string" && value.indexOf("true")!=-1)) {
			return true;
		}
		else if (value=="" && arguments.length==3) {
			return altValue;
		}

		return false;
	}

	self.getViewPreferenceValue = function(view, property, defaultValue) {
		var value = window.getComputedStyle(view).getPropertyValue(property);

		if (value===undefined) {
			return defaultValue;
		}
		
		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) { 
			return capture;
		});

		return value;
	}

	self.getStyleRuleValue = function(cssRule, property) {
		var value = cssRule ? cssRule.style.getPropertyValue(property) : null;

		if (value===undefined) {
			return null;
		}
		
		value = value.replace(/^[\s\"]*/, "");
		value = value.replace(/[\s\"]*$/, "");
		value = value.replace(/^[\s"]*(.*?)[\s"]*$/, function (match, capture) { 
			return capture;
		});

		return value;
	}

	self.getCSSPropertyValueForElement = function(id, property) {
		var styleSheets = document.styleSheets;
		var numOfStylesheets = styleSheets.length;
		var values = [];
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var value;

		for(var i=0;i<numOfStylesheets;i++) {
			var styleSheet = styleSheets[i];
			var cssRules = self.getStylesheetRules(styleSheet);
			var numOfCSSRules = cssRules.length;
			var cssRule;
			
			for (var j=0;j<numOfCSSRules;j++) {
				cssRule = cssRules[j];
				
				if (cssRule.media) {
					var mediaRules = cssRule.cssRules;
					var numOfMediaRules = mediaRules ? mediaRules.length : 0;
					
					for(var k=0;k<numOfMediaRules;k++) {
						var mediaRule = mediaRules[k];
						
						if (mediaRule.selectorText==selectorIDText || mediaRule.selectorText==selectorClassText) {
							
							if (mediaRule.style && property in mediaRule.style) {
								value = mediaRule.style.getPropertyValue(property);
								values.push(value);
							}
						}
					}
				}
				else {

					if (cssRule.selectorText==selectorIDText || cssRule.selectorText==selectorClassText) {
						if (cssRule.style && property in cssRule.style) {
							value = cssRule.style.getPropertyValue(property);
							values.push(value);
						}
					}
				}
			}
		}
		
		return values.pop();
	}

	self.collectViews = function() {
		var viewIds = self.getViewIds();

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getViewById(id);
			//view && view.addEventListener("animationend", self.animationEndHandler);
			self.views[id] = view;
		}
		
		self.viewIds = viewIds;
	}

	self.collectOverlays = function() {
		var viewIds = self.getViewIds();
		var ids = [];

		for (let index = 0; index < viewIds.length; index++) {
			const id = viewIds[index];
			const view = self.getViewById(id);
			const isOverlay = view && self.isOverlay(view);
			
			if (isOverlay) {
				ids.push(id);
				self.overlays[id] = view;
			}
		}
		
		self.overlayIds = ids;
	}

	self.collectMediaQueries = function() {
		var viewIds = self.getViewIds();
		var styleSheet = self.getApplicationStylesheet();
		var cssRules = self.getStylesheetRules(styleSheet);
		var numOfCSSRules = cssRules ? cssRules.length : 0;
		var cssRule;
		var id = viewIds.length ? viewIds[0]: ""; // single view
		var selectorIDText = "#" + id;
		var selectorClassText = "." + id + "_Class";
		var viewsNotFound = viewIds.slice();
		var viewsFound = [];
		var selectorText = null;
		var property = self.prefix + "view-id";
		
		for (var j=0;j<numOfCSSRules;j++) {
			cssRule = cssRules[j];
			
			if (cssRule.media) {
				var mediaRules = cssRule.cssRules;
				var numOfMediaRules = mediaRules ? mediaRules.length : 0;
				
				for(var k=0;k<numOfMediaRules;k++) {
					var mediaRule = mediaRules[k];
					var mediaId = null;

					selectorText = mediaRule.selectorText;
					
					if (selectorText==".mediaViewInfo") {

						mediaId = self.getStyleRuleValue(mediaRule, property);

						self.addView(mediaId, cssRule);
						viewsFound.push(mediaId);

						if (viewsNotFound.indexOf(mediaId)!=-1) {
							viewsNotFound.splice(viewsNotFound.indexOf(mediaId));
						}

						break;
					}
				}
			}
			else {
				selectorText = cssRule.selectorText.replace(/[#|\s|*]?/g, "");

				if (viewIds.indexOf(selectorText)!=-1) {
					self.addView(selectorText, cssRule);

					if (viewsNotFound.indexOf(selectorText)!=-1) {
						viewsNotFound.splice(viewsNotFound.indexOf(selectorText));
					}

					break;
				}
			}
		}

		if (viewsNotFound.length) {
			console.log("Could not find the following views:" + viewsNotFound.join(",") + "");
			console.log("Views found:" + viewsFound.join(",") + "");
		}
	}

	/**
	 * Adds a view. A view object contains the id of the view and the style rule
	 * Use enableMediaQuery(rule) to enable
	 * An array of view names are in self.views array
	 */
	self.addView = function(name, cssRule, parentId) {
		var state = {name:name, rule:cssRule, id:name, parentId:parentId};
		self.addedViews.push(name);
		self.viewsDictionary[name] = state;
		self.mediaQueryDictionary[name] = cssRule;
	}

	self.hasView = function(name) {

		if (self.addedViews.indexOf(name)!=-1) {
			return true;
		}
		return false;
	}

	/**
	 * Go to view by id. Views are added in addView()
	 * @param {String} name id of view in current
	 * @param {String} parent id of parent view
	 * @param {Boolean} maintainPreviousState if true then do not hide other views
	 */
	self.goToView = function(name, maintainPreviousState, parent) {
		var state = self.viewsDictionary[name];

		if (state) {
			if (maintainPreviousState==false || maintainPreviousState==null) {
				self.hideViews();
			}
			self.enableMediaQuery(state.rule);
			self.updateViewLabel();
			self.updateURL();
		}
		else {
			var event = new Event(self.STATE_NOT_FOUND);
			self.stateName = name;
			window.dispatchEvent(event);
		}
	}

	/**
	 * Go to the view in the event targets CSS variable
	 */
	self.goToTargetView = function(event) {
		var button = event.currentTarget;
		var buttonComputedStyles = getComputedStyle(button);
		var actionTargetValue = buttonComputedStyles.getPropertyValue(self.prefix+"action-target").trim();
		var animation = buttonComputedStyles.getPropertyValue(self.prefix+"animation").trim();
		var targetType = buttonComputedStyles.getPropertyValue(self.prefix+"action-type").trim();
		var targetView = self.application ? null : self.getElement(actionTargetValue);
		var actionTargetStyles = targetView ? targetView.style : null;
		var state = self.viewsDictionary[actionTargetValue];
		
		// navigate to page
		if (self.application==false || targetType=="page") {
			document.location.href = "./" + actionTargetValue;
			return;
		}

		// if view is found
		if (targetView) {

			if (self.currentOverlay) {
				self.removeOverlay(false);
			}

			// add animation set in event target style declaration
			if (animation && self.supportAnimations) {
				self.crossFade(self.currentView, targetView, false, animation);
			}
			else {
				self.setViewVariables(self.currentView);
				self.hideViews();
				self.enableMediaQuery(state.rule);
				self.scaleViewIfNeeded(targetView);
				self.centerView(targetView);
				self.updateViewLabel();
				self.updateURL();
			}
		}
		else {
			var stateEvent = new Event(self.STATE_NOT_FOUND);
			self.stateName = name;
			window.dispatchEvent(stateEvent);
		}

		event.stopImmediatePropagation();
	}

	/**
	 * Cross fade between views
	 **/
	self.crossFade = function(from, to, update, animation) {
		var targetIndex = to.parentNode
		var fromIndex = Array.prototype.slice.call(from.parentElement.children).indexOf(from);
		var toIndex = Array.prototype.slice.call(to.parentElement.children).indexOf(to);

		if (from.parentNode==to.parentNode) {
			var reverse = self.getReverseAnimation(animation);
			var duration = self.getAnimationDuration(animation, true);

			// if target view is above (higher index)
			// then fade in target view 
			// and after fade in then hide previous view instantly
			if (fromIndex<toIndex) {
				self.setElementAnimation(from, null);
				self.setElementAnimation(to, null);
				self.showViewByMediaQuery(to);
				self.fadeIn(to, update, animation);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
					self.updateViewLabel();
				}, duration)
			}
			// if target view is on bottom
			// then show target view instantly 
			// and fade out current view
			else if (fromIndex>toIndex) {
				self.setElementAnimation(to, null);
				self.setElementAnimation(from, null);
				self.showViewByMediaQuery(to);
				self.fadeOut(from, update, reverse);

				setTimeout(function() {
					self.setElementAnimation(to, null);
					self.setElementAnimation(from, null);
					self.hideView(from);
					self.updateURL();
					self.setViewVariables(to);
				}, duration)
			}
		}
	}

	self.fadeIn = function(element, update, animation) {
		self.showViewByMediaQuery(element);

		if (update) {
			self.updateURL(element);

			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.setViewVariables(element);
				self.updateViewLabel();
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		self.setElementAnimation(element, null);
		
		element.style.animation = animation;
	}

	self.fadeOutCurrentView = function(animation, update) {
		if (self.currentView) {
			self.fadeOut(self.currentView, update, animation);
		}
		if (self.currentOverlay) {
			self.fadeOut(self.currentOverlay, update, animation);
		}
	}

	self.fadeOut = function(element, update, animation) {
		if (update) {
			element.addEventListener("animationend", function(event) {
				element.style.animation = null;
				self.hideView(element);
				element.removeEventListener("animationend", arguments.callee);
			});
		}

		element.style.animationPlayState = "paused";
		element.style.animation = animation;
		element.style.animationPlayState = "running";
	}

	self.getReverseAnimation = function(animation) {
		if (animation && animation.indexOf("reverse")==-1) {
			animation += " reverse";
		}

		return animation;
	}

	/**
	 * Get duration in animation string
	 * @param {String} animation animation value
	 * @param {Boolean} inMilliseconds length in milliseconds if true
	 */
	self.getAnimationDuration = function(animation, inMilliseconds) {
		var duration = 0;
		var expression = /.+(\d\.\d)s.+/;

		if (animation && animation.match(expression)) {
			duration = parseFloat(animation.replace(expression, "$" + "1"));
			if (duration && inMilliseconds) duration = duration * 1000;
		}

		return duration;
	}

	self.setElementAnimation = function(element, animation, priority) {
		element.style.setProperty("animation", animation, "important");
	}

	self.getElement = function(id) {
		var elementId = id ? id.trim() : id;
		var element = elementId ? document.getElementById(elementId) : null;

		return element;
	}

	self.resizeHandler = function(event) {
		var view = self.getVisibleView();

		if (self.showByMediaQuery && view) {
			self.setViewOptions(view);
			self.setViewVariables(view);
		}
		else {
			self.scaleViewIfNeeded();
		}

		window.dispatchEvent(new Event(self.APPLICATION_RESIZE));
	}

	self.scaleViewIfNeeded = function(view) {

		if (self.scaleViewsOnResize) {
			if (view==null) {
				view = self.getVisibleView();
			}

			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME)=="false" ? false : true;

			if (isViewScaled) {
				self.scaleViewToFit(view, true);
			}
			else {
				self.scaleViewToActualSize(view);
			}
		}
		else if (view) {
			self.centerView(view);
		}
	}

	self.centerView = function(view) {

		if (self.scaleToFit) {
			self.scaleViewToFit(view, true);
		}
		else {
			self.scaleViewToActualSize(view);  // for centering support for now
		}
	}

	self.preventDoubleClick = function(event) {
		event.stopImmediatePropagation();
	}

	self.hashChangeHandler = function(event) {
		var fragment = window.location.hash ? window.location.hash.replace("#", "") : "";
		var view = self.getViewById(fragment);

		if (view) {
			self.hideViews();
			self.showView(view);
			self.setViewVariables(view);
			self.updateViewLabel();
			window.dispatchEvent(new Event(self.VIEW_CHANGE));
		}
		else {
			window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
		}
	}

	self.popStateHandler = function(event) {
		var state = event.state;
		var fragment = state ? state.name : window.location.hash;
		var view = self.getViewById(fragment);

		if (view) {
			self.hideViews();
			self.showView(view);
			self.updateViewLabel();
		}
		else {
			window.dispatchEvent(new Event(self.VIEW_NOT_FOUND));
		}
	}

	self.doubleClickHandler = function(event) {
		var view = self.getVisibleView();
		var scaleValue = view ? self.getViewScaleValue(view) : 1;
		var scaleNeededToFit = view ? self.getViewFitToViewportScale(view) : 1;
		var scaleNeededToFitWidth = view ? self.getViewFitToViewportWidthScale(view) : 1;
		var scaleNeededToFitHeight = view ? self.getViewFitToViewportHeightScale(view) : 1;
		var scaleToFitType = self.scaleToFitType;

		// Three scenarios
		// - scale to fit on double click
		// - set scale to actual size on double click
		// - switch between scale to fit and actual page size

		if (scaleToFitType=="width") {
			scaleNeededToFit = scaleNeededToFitWidth;
		}
		else if (scaleToFitType=="height") {
			scaleNeededToFit = scaleNeededToFitHeight;
		}

		// if scale and actual size enabled then switch between
		if (self.scaleToFitOnDoubleClick && self.actualSizeOnDoubleClick) {
			var isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
			var isScaled = false;
			
			// if scale is not 1 then view needs scaling
			if (scaleNeededToFit!=1) {

				// if current scale is at 1 it is at actual size
				// scale it to fit
				if (scaleValue==1) {
					self.scaleViewToFit(view);
					isScaled = true;
				}
				else {
					// scale is not at 1 so switch to actual size
					self.scaleViewToActualSize(view);
					isScaled = false;
				}
			}
			else {
				// view is smaller than viewport 
				// so scale to fit() is scale actual size
				// actual size and scaled size are the same
				// but call scale to fit to retain centering
				self.scaleViewToFit(view);
				isScaled = false;
			}
			
			view.setAttributeNS(null, self.SIZE_STATE_NAME, isScaled+"");
			isViewScaled = view.getAttributeNS(null, self.SIZE_STATE_NAME);
		}
		else if (self.scaleToFitOnDoubleClick) {
			self.scaleViewToFit(view);
		}
		else if (self.actualSizeOnDoubleClick) {
			self.scaleViewToActualSize(view);
		}

	}

	self.scaleViewToFit = function(view) {
		return self.setViewScaleValue(view, true);
	}

	self.scaleViewToActualSize = function(view) {
		self.setViewScaleValue(view, false, 1);
	}

	self.onloadHandler = function(event) {
		self.initialize();
	}

	self.getStackArray = function(error) {
		var value = "";
		
		if (error==null) {
		  try {
			 error = new Error("Stack");
		  }
		  catch (e) {
			 
		  }
		}
		
		if ("stack" in error) {
		  value = error.stack;
		  var methods = value.split(/\n/g);
	 
		  var newArray = methods ? methods.map(function (value, index, array) {
			 value = value.replace(/\@.*/,"");
			 return value;
		  }) : null;
	 
		  if (newArray && newArray[0].includes("getStackTrace")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0].includes("getStackArray")) {
			 newArray.shift();
		  }
		  if (newArray && newArray[0]=="") {
			 newArray.shift();
		  }
	 
			return newArray;
		}
		
		return null;
	}

	self.log = function(value) {
		console.log.apply(this, [value]);
	}
	
	// initialize on load
	// sometimes the body size is 0 so we call this now and again later
	window.addEventListener("load", self.onloadHandler);
	window.document.addEventListener("DOMContentLoaded", self.onloadHandler);
}

window.application = new Application();
</script>
</head>
<body>
<div id="ID10_Blog___1">
	<div id="Post_Thumbnails">
		<svg class="Path_239" viewBox="0 0 1920 2158">
			<path fill="rgba(255,255,255,1)" id="Path_239" d="M 0 0 L 1920 0 L 1920 2158 L 0 2158 L 0 0 Z">
			</path>
		</svg>
	</div>
	<div id="Post_Thumbnails_i">
		<svg class="Path_239_j" viewBox="0 0 1920 2160">
			<path fill="rgba(255,255,255,1)" id="Path_239_j" d="M 0 0 L 1920 0 L 1920 2160 L 0 2160 L 0 0 Z">
			</path>
		</svg>
	</div>
	<div id="Post_Thumbnails_k">
		<svg class="Rectangle_78">
			<rect fill="rgba(255,255,255,1)" id="Rectangle_78" rx="0" ry="0" x="0" y="0" width="1920" height="1080">
			</rect>
		</svg>
	</div>
	<div id="Post_Preview">
		<div id="text">
			<div id="Lorem_ipsum_dolor_sit_amet__co">
				<span>Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
			</div>
			<div id="Culpa_qui_officia_deserunt_mol">
				<span>Culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptartem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi ropeior architecto beatae vitae dicta sunt explicabo. Nemo eniem ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eosep quiklop ratione voluptatem sequi nesciunt. Neque porro quisquam est, quepi dolorem ipsum quia dolor srit amet, consectetur adipisci velit, seid quia non numquam eiuris modi tempora incidunt ut labore et dolore magnam aliquam quaerat iope voluptatem.<br/><br/>Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
			</div>
			<div id="Culpa_qui_officia_deserunt_mol_q">
				<span>Culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptartem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi ropeior architecto beatae vitae dicta sunt explicabo. Nemo eniem ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eosep quiklop ratione voluptatem sequi nesciunt. Neque porro quisquam est, quepi dolorem ipsum quia dolor srit amet, consectetur adipisci velit, seid quia non numquam eiuris modi tempora incidunt ut labore et dolore magnam aliquam quaerat iope voluptatem. Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
			</div>
			<div id="Paper_Prototype">
				<span>Paper Prototype</span>
			</div>
			<div id="_Excepteur_sint_occaecat_cupid">
				<span>“Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem.”</span>
			</div>
			<svg class="Rectangle_8">
				<rect fill="transparent" stroke="rgba(136,136,136,1)" stroke-width="1px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Rectangle_8" rx="0" ry="0" x="0" y="0" width="360" height="2">
				</rect>
			</svg>
		</div>
	</div>
	<div id="Post_Preview_u">
		<div id="text_v">
			<div id="Lorem_ipsum_dolor_sit_amet__co_w">
				<span>Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
			</div>
			<div id="Culpa_qui_officia_deserunt_mol_x">
				<span>Culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptartem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi ropeior architecto beatae vitae dicta sunt explicabo. Nemo eniem ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eosep quiklop ratione voluptatem sequi nesciunt. Neque porro quisquam est, quepi dolorem ipsum quia dolor srit amet, consectetur adipisci velit, seid quia non numquam eiuris modi tempora incidunt ut labore et dolore magnam aliquam quaerat iope voluptatem.<br/><br/>Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
			</div>
			<div id="Culpa_qui_officia_deserunt_mol_y">
				<span>Culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptartem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi ropeior architecto beatae vitae dicta sunt explicabo. Nemo eniem ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eosep quiklop ratione voluptatem sequi nesciunt. Neque porro quisquam est, quepi dolorem ipsum quia dolor srit amet, consectetur adipisci velit, seid quia non numquam eiuris modi tempora incidunt ut labore et dolore magnam aliquam quaerat iope voluptatem. Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
			</div>
			<div id="Behavioural_Usability_Testing">
				<span>Behavioural Usability Testing</span>
			</div>
			<div id="_Excepteur_sint_occaecat_cupid_">
				<span>“Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem.”</span>
			</div>
			<svg class="Rectangle_8_">
				<rect fill="transparent" stroke="rgba(136,136,136,1)" stroke-width="1px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Rectangle_8_" rx="0" ry="0" x="0" y="0" width="360" height="2">
				</rect>
			</svg>
		</div>
	</div>
	<div id="Footer_6" class="Footer_6">
		<svg class="Base" viewBox="0 0 1920 1080">
			<path fill="rgba(108,147,251,1)" id="Base" d="M 0 0 L 1920 0 L 1920 1080 L 0 1080 L 0 0 Z">
			</path>
		</svg>
		<div id="text_">
			<div id="Thesis_Showcase">
				<span>Thesis Showcase</span>
			</div>
			<div id="Lorem_ipsum_dolor_sit_amet__co_">
				<span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut ero labore et dolore magna aliqua. <br/>enim ad minim veniam, quis nostrud exercitation ullamco.</span>
			</div>
		</div>
	</div>
	<div id="Group_327">
		<div id="Writing">
			<span>Writing</span>
		</div>
		<div id="Drawing">
			<span>Drawing</span>
		</div>
		<svg class="Path_53" viewBox="4656.722 1603 91.432 2">
			<path fill="transparent" stroke="rgba(108,147,251,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Path_53" d="M 4656.72216796875 1603 C 4656.72216796875 1603 4748.15380859375 1603 4748.15380859375 1603">
			</path>
		</svg>
	</div>
	<svg class="Rectangle_1094">
		<rect fill="rgba(199,198,204,1)" id="Rectangle_1094" rx="0" ry="0" x="0" y="0" width="1480" height="560">
		</rect>
	</svg>
	<div id="Group_330">
		<div id="Graph_1">
			<span>Graph 1</span>
		</div>
		<div id="Graph_2">
			<span>Graph 2</span>
		</div>
		<svg class="Path_53_bf" viewBox="4656.722 1603 104.432 2">
			<path fill="transparent" stroke="rgba(108,147,251,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Path_53_bf" d="M 4656.72216796875 1603 L 4761.15380859375 1603">
			</path>
		</svg>
	</div>
	<svg class="Rectangle_1095">
		<rect fill="rgba(199,198,204,1)" id="Rectangle_1095" rx="0" ry="0" x="0" y="0" width="1480" height="560">
		</rect>
	</svg>
	<svg class="Line_146" viewBox="0 0 1480 560">
		<path fill="transparent" stroke="rgba(112,112,112,1)" stroke-width="1px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Line_146" d="M 0 0 L 1480 560">
		</path>
	</svg>
	<svg class="Line_147" viewBox="0 0 1480 560">
		<path fill="transparent" stroke="rgba(112,112,112,1)" stroke-width="1px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Line_147" d="M 1480 0 L 0 560">
		</path>
	</svg>
	<svg class="Line_148" viewBox="0 0 1480 560">
		<path fill="transparent" stroke="rgba(255,255,255,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Line_148" d="M 0 0 L 1480 560">
		</path>
	</svg>
	<svg class="Line_150" viewBox="0 0 1480 560">
		<path fill="transparent" stroke="rgba(255,255,255,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Line_150" d="M 0 0 L 1480 560">
		</path>
	</svg>
	<svg class="Line_149" viewBox="0 0 1480 560">
		<path fill="transparent" stroke="rgba(255,255,255,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Line_149" d="M 1480 0 L 0 560">
		</path>
	</svg>
	<svg class="Line_151" viewBox="0 0 1480 560">
		<path fill="transparent" stroke="rgba(255,255,255,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Line_151" d="M 1480 0 L 0 560">
		</path>
	</svg>
	<div id="Post_Thumbnails_bn">
		<svg class="Rectangle_78_bo">
			<rect fill="rgba(255,255,255,1)" id="Rectangle_78_bo" rx="0" ry="0" x="0" y="0" width="1920" height="1080">
			</rect>
		</svg>
	</div>
	<div id="Footer_6_bp" class="Footer_6">
		<svg class="Base_bq" viewBox="0 0 1920 1080">
			<path fill="rgba(108,147,251,1)" id="Base_bq" d="M 0 0 L 1920 0 L 1920 1080 L 0 1080 L 0 0 Z">
			</path>
		</svg>
		<div id="text_br">
			<div id="Conclusion">
				<span>Conclusion</span>
			</div>
			<div id="Lorem_ipsum_dolor_sit_amet__co_bt">
				<span>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut ero labore et dolore magna aliqua. <br/>enim ad minim veniam, quis nostrud exercitation ullamco.</span>
			</div>
		</div>
	</div>
	<svg class="Ellipse_253">
		<ellipse fill="rgba(255,255,255,1)" id="Ellipse_253" rx="40" ry="40" cx="40" cy="40">
		</ellipse>
	</svg>
	<svg class="path" viewBox="4 4 20 20">
		<path fill="rgba(108,147,251,1)" id="path" d="M 13.99999713897705 3.999998092651367 L 12.24999713897705 5.75 L 19.24999809265137 12.74999523162842 L 3.999998092651367 12.74999523162842 L 3.999998092651367 15.24999618530273 L 19.24999809265137 15.24999618530273 L 12.24999713897705 22.25 L 13.99999713897705 23.99999046325684 L 23.99999046325684 13.99999713897705 L 13.99999713897705 3.999998092651367 Z">
		</path>
	</svg>
	<div id="_1">
		<svg class="Union_2" viewBox="-0.001 0 151.465 63.065">
			<path fill="transparent" stroke="rgba(255,255,255,1)" stroke-width="1px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Union_2" d="M 68.08139801025391 55.41390228271484 L 27.70650100708008 55.41390228271484 C 12.40470027923584 55.41390228271484 -0.0009000000427477062 43.00830078125 -0.0009000000427477062 27.70650100708008 C -0.0009000000427477062 12.40470027923584 12.40470027923584 0 27.70650100708008 0 L 123.7572021484375 0 C 139.0590057373047 0 151.4636993408203 12.40470027923584 151.4636993408203 27.70650100708008 C 151.4636993408203 43.00830078125 139.0590057373047 55.41390228271484 123.7572021484375 55.41390228271484 L 83.38294219970703 55.41390228271484 L 75.7322998046875 63.06480026245117 L 68.08139801025391 55.41390228271484 Z">
			</path>
		</svg>
		<div id="Back_to_Top">
			<span>Back to Top</span>
		</div>
	</div>
	<div id="Post_Thumbnails_bz">
		<svg class="Rectangle_78_b">
			<rect fill="rgba(255,255,255,1)" id="Rectangle_78_b" rx="0" ry="0" x="0" y="0" width="1920" height="1080">
			</rect>
		</svg>
	</div>
	<div id="Post_Thumbnails_b">
		<svg class="Path_242" viewBox="0 0 1920 1080">
			<path fill="rgba(255,255,255,1)" id="Path_242" d="M 0 0 L 1920 0 L 1920 1080 L 0 1080 L 0 0 Z">
			</path>
		</svg>
	</div>
	<div id="Post_Thumbnails_ca">
		<svg class="Path_243" viewBox="0 0 1920 1080">
			<path fill="rgba(255,255,255,1)" id="Path_243" d="M 0 0 L 1920 0 L 1920 1080 L 0 1080 L 0 0 Z">
			</path>
		</svg>
	</div>
	<div id="Call_to_Action">
		<div id="Design_Idea__1">
			<span>Design Idea #1</span>
		</div>
	</div>
	<svg class="Path_235" viewBox="0 0 186.408 68.198">
		<path fill="transparent" stroke="rgba(108,147,251,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Path_235" d="M 34 0 L 152.408203125 0 C 171.1858825683594 0 186.408203125 15.22231674194336 186.408203125 34 L 186.408203125 34.1981201171875 C 186.408203125 52.97580337524414 171.1858825683594 68.1981201171875 152.408203125 68.1981201171875 L 34 68.1981201171875 C 15.22231674194336 68.1981201171875 0 52.97580337524414 0 34.1981201171875 L 0 34 C 0 15.22231674194336 15.22231674194336 0 34 0 Z">
		</path>
	</svg>
	<div id="LIKE_ci">
		<span>LIKE</span>
	</div>
	<div id="Call_to_Action_b">
		<div id="Design_Idea__1_ca">
			<span>Design Idea #1</span>
		</div>
	</div>
	<div id="Call_to_Action_cb">
		<div id="Design_Idea__2">
			<span>Design Idea #2</span>
		</div>
	</div>
	<div id="Call_to_Action_cd">
		<div id="Design_Idea__3">
			<span>Design Idea #3</span>
		</div>
	</div>
	<svg class="Path_236" viewBox="0 0 186.408 68.198">
		<path fill="transparent" stroke="rgba(108,147,251,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Path_236" d="M 34 0 L 152.408203125 0 C 171.1858825683594 0 186.408203125 15.22231674194336 186.408203125 34 L 186.408203125 34.1981201171875 C 186.408203125 52.97580337524414 171.1858825683594 68.1981201171875 152.408203125 68.1981201171875 L 34 68.1981201171875 C 15.22231674194336 68.1981201171875 0 52.97580337524414 0 34.1981201171875 L 0 34 C 0 15.22231674194336 15.22231674194336 0 34 0 Z">
		</path>
	</svg>
	<svg class="Path_237" viewBox="0 0 186.408 68.198">
		<path fill="transparent" stroke="rgba(230,55,197,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Path_237" d="M 34 0 L 152.408203125 0 C 171.1858825683594 0 186.408203125 15.22231674194336 186.408203125 34 L 186.408203125 34.1981201171875 C 186.408203125 52.97580337524414 171.1858825683594 68.1981201171875 152.408203125 68.1981201171875 L 34 68.1981201171875 C 15.22231674194336 68.1981201171875 0 52.97580337524414 0 34.1981201171875 L 0 34 C 0 15.22231674194336 15.22231674194336 0 34 0 Z">
		</path>
	</svg>
	<svg class="Path_238" viewBox="0 0 186.408 68.198">
		<path fill="transparent" stroke="rgba(255,109,82,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Path_238" d="M 34 0 L 152.408203125 0 C 171.1858825683594 0 186.408203125 15.22231674194336 186.408203125 34 L 186.408203125 34.1981201171875 C 186.408203125 52.97580337524414 171.1858825683594 68.1981201171875 152.408203125 68.1981201171875 L 34 68.1981201171875 C 15.22231674194336 68.1981201171875 0 52.97580337524414 0 34.1981201171875 L 0 34 C 0 15.22231674194336 15.22231674194336 0 34 0 Z">
		</path>
	</svg>
	<div id="LIKE_ci">
		<span>LIKE</span>
	</div>
	<div id="LIKE_cj">
		<span>LIKE</span>
	</div>
	<div id="LIKE_ck">
		<span>LIKE</span>
	</div>
	<div id="Post_Thumbnails_cl">
		<svg class="Path_239_cm" viewBox="0 0 1920 2160">
			<path fill="rgba(255,255,255,1)" id="Path_239_cm" d="M 0 0 L 1920 0 L 1920 2160 L 0 2160 L 0 0 Z">
			</path>
		</svg>
	</div>
	<div id="Group_327_cn">
		<div id="Diagram_1">
			<span>Diagram 1</span>
		</div>
		<div id="Diagram_2">
			<span>Diagram 2</span>
		</div>
		<svg class="Path_53_cq" viewBox="4633.722 1603 129.432 2">
			<path fill="transparent" stroke="rgba(108,147,251,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Path_53_cq" d="M 4633.72216796875 1603 L 4763.15380859375 1603">
			</path>
		</svg>
	</div>
	<svg class="Rectangle_1094_cr">
		<rect fill="rgba(199,198,204,1)" id="Rectangle_1094_cr" rx="0" ry="0" x="0" y="0" width="1480" height="560">
		</rect>
	</svg>
	<svg class="Line_144" viewBox="0 0 1480 560">
		<path fill="transparent" stroke="rgba(255,255,255,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Line_144" d="M 0 0 L 1480 560">
		</path>
	</svg>
	<svg class="Line_145" viewBox="0 0 1480 560">
		<path fill="transparent" stroke="rgba(255,255,255,1)" stroke-width="2px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Line_145" d="M 1480 0 L 0 560">
		</path>
	</svg>
	<div id="Post_Preview_cu">
		<div id="text_cv">
			<div id="Lorem_ipsum_dolor_sit_amet__co_cw">
				<span>Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
			</div>
			<div id="Culpa_qui_officia_deserunt_mol_cx">
				<span>Culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptartem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi ropeior architecto beatae vitae dicta sunt explicabo. Nemo eniem ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eosep quiklop ratione voluptatem sequi nesciunt. Neque porro quisquam est, quepi dolorem ipsum quia dolor srit amet, consectetur adipisci velit, seid quia non numquam eiuris modi tempora incidunt ut labore et dolore magnam aliquam quaerat iope voluptatem.<br/><br/>Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
			</div>
			<div id="Culpa_qui_officia_deserunt_mol_cy">
				<span>Culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptartem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi ropeior architecto beatae vitae dicta sunt explicabo. Nemo eniem ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eosep quiklop ratione voluptatem sequi nesciunt. Neque porro quisquam est, quepi dolorem ipsum quia dolor srit amet, consectetur adipisci velit, seid quia non numquam eiuris modi tempora incidunt ut labore et dolore magnam aliquam quaerat iope voluptatem. Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
			</div>
			<div id="Attitudinal_Focus_Groups">
				<span>Attitudinal Focus Groups</span>
			</div>
			<div id="_Excepteur_sint_occaecat_cupid_c">
				<span>“Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem.”</span>
			</div>
			<svg class="Rectangle_8_c">
				<rect fill="transparent" stroke="rgba(136,136,136,1)" stroke-width="1px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Rectangle_8_c" rx="0" ry="0" x="0" y="0" width="360" height="2">
				</rect>
			</svg>
		</div>
	</div>
	<div id="Group_331">
		<div id="Lorem_ipsum_dolor_sit_amet__co_c">
			<span>Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
		</div>
		<div id="_Excepteur_sint_occaecat_cupid_da">
			<span>“Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem.”</span>
		</div>
		<svg class="Rectangle_1096">
			<rect fill="transparent" stroke="rgba(136,136,136,1)" stroke-width="1px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Rectangle_1096" rx="0" ry="0" x="0" y="0" width="360" height="2">
			</rect>
		</svg>
		<div id="Description">
			<span>Description</span>
		</div>
	</div>
	<div id="Group_332">
		<div id="Lorem_ipsum_dolor_sit_amet__co_da">
			<span>Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
		</div>
		<div id="_Excepteur_sint_occaecat_cupid_db">
			<span>“Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem.”</span>
		</div>
		<svg class="Rectangle_1096_da">
			<rect fill="transparent" stroke="rgba(136,136,136,1)" stroke-width="1px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Rectangle_1096_da" rx="0" ry="0" x="0" y="0" width="360" height="2">
			</rect>
		</svg>
		<div id="Description_db">
			<span>Description</span>
		</div>
	</div>
	<div id="Group_333">
		<div id="Lorem_ipsum_dolor_sit_amet__co_dd">
			<span>Lorem ipsum dolor sit amet, consectetur adipisifwcing elit, sed do eiusmod tempor incididunt ut labore et dolore roipi magna aliqua. Ut enim ad minim veeniam, quis nostruklad exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in tufpoy voluptate velit esse cillum dolore eu fugiat nulla parieratur. Excepteur sint occaecat cupidatat.</span>
		</div>
		<div id="_Excepteur_sint_occaecat_cupid_de">
			<span>“Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem.”</span>
		</div>
		<svg class="Rectangle_1096_df">
			<rect fill="transparent" stroke="rgba(136,136,136,1)" stroke-width="1px" stroke-linejoin="miter" stroke-linecap="butt" stroke-miterlimit="4" shape-rendering="auto" id="Rectangle_1096_df" rx="0" ry="0" x="0" y="0" width="360" height="2">
			</rect>
		</svg>
		<div id="Description_dg">
			<span>Description</span>
		</div>
	</div>
</div>
</body>
</html>
